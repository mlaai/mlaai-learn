{
  "openapi": "3.0.0",
  "info": {
    "title": "Forecasting",
    "description": "Provides Key Forecasting Metrics",
    "version": "1.0.2"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/MlaaiLearn/Forecasting/1.0.2",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/forecasting/{forecastingId}": {
      "get": {
        "summary": "Returns forecasting metrics",
        "parameters": [
          {
            "name": "forecastingId",
            "in": "path",
            "description": "The unique identifier of the forecast",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forecasting.Properties"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/400BadRequest"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/404NotFound"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/forecasting": {
      "post": {
        "summary": "Returns forecasting metrics",
        "requestBody": {
          "description": "Optional description in *Markdown*",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Forecasting.Observation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forecasting.Properties"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/400BadRequest"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/404NotFound"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Forecasting.Observation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "actualValue": {
            "type": "integer",
            "format": "int64"
          },
          "forecastedValue": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Forecasting.Properties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "numberOfObservations": {
            "type": "integer",
            "format": "int64"
          },
          "mean": {
            "type": "integer",
            "format": "int64"
          },
          "standardDeviation": {
            "type": "integer",
            "format": "int64"
          },
          "coefficientOfVariation": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Forecasting.CalculatedValues": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "meanDeviation": {
            "type": "integer",
            "format": "int64"
          },
          "meanAbsoluteDeviation": {
            "type": "integer",
            "format": "int64"
          },
          "meanSquaredError": {
            "type": "integer",
            "format": "int64"
          },
          "rootMeanSquaredError": {
            "type": "integer",
            "format": "int64"
          },
          "meanPercentError": {
            "type": "integer",
            "format": "int64"
          },
          "meanAbsolutePercentError": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "responses": {
      "400BadRequest": {
        "description": "The server could not understand the request due to invalid syntax !"
      },
      "404NotFound": {
        "description": "The specified resource was not found !"
      }
    },
    "parameters": {
      "offsetParam": {
        "name": "offset",
        "in": "query",
        "description": "Number of items to skip before returning the results",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "minimum": 0,
          "type": "integer",
          "format": "int32",
          "default": 0
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "Mamimum number of items to return",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "maximum": 100,
          "minimum": 1,
          "type": "integer",
          "format": "int32",
          "default": 20
        }
      }
    }
  }
}
